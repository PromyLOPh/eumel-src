(**************************************************************************)
(*                                                                        *)
(*     Generatorprogramm zur Installation des EUMEL-BASIC-Systems         *)
(*                                                                        *)
(*     Autor: Heiko Indenbirken                                           *)
(*     Ãœberarbeitet von: Michael Overdick                                 *)
(*                                                                        *)
(*     Stand: 27.08.1987                                                  *)
(*                                                                        *)
(**************************************************************************)

LET coder name = "eumel coder 1.8.1";

show headline;
from archive ("BASIC.1", (coder name & "eumel0 codes") - all);
from archive ("BASIC.2",
       ("BASIC.Runtime" & "BASIC.Administration" & "BASIC.Compiler") - all);
set status;
insert ("eumel coder 1.8.1");
insert ("BASIC.Runtime");
insert ("BASIC.Administration");
insert ("BASIC.Compiler");
forget (coder name & "BASIC.Runtime"
               & "BASIC.Administration" & "BASIC.Compiler" & "gen.BASIC");
restore status;
show end .

show headline:
  page;
  putline ("                 "15"Einrichten des EUMEL-BASIC-Systems "14"");
  line  .

set status:
  BOOL VAR old check := check,
           old warnings := warnings,
           old command dialogue := command dialogue;
  check off;
  warnings off;
  command dialogue (FALSE).

restore status:
  IF old check     THEN do ("check on") ELSE do ("check off") FI;
  IF old warnings  THEN warnings on                           FI;
  command dialogue (old command dialogue).

show end:
  line (2);
  putline ("                      "15"BASIC-System installiert "14"");
  line  .
 
PROC from archive (TEXT CONST name, THESAURUS CONST files):
  IF highest entry (files) > 0
  THEN ask for archive;
       archive (name);
       fetch (files, archive);
       release (archive);
       putline ("Archiv abgemeldet !")
  FI  .

ask for archive:
  line;
  IF no ("Archiv """ + name + """ eingelegt")
  THEN errorstop ("Archive nicht bereit") FI  .

END PROC from archive;

THESAURUS OP & (TEXT CONST left, right):
  THESAURUS VAR result := empty thesaurus;
  insert (result, left);
  insert (result, right);
  result
END OP &;

THESAURUS OP & (THESAURUS CONST left, TEXT CONST right):
  THESAURUS VAR result := left;
  insert (result, right);
  result
END OP &;


